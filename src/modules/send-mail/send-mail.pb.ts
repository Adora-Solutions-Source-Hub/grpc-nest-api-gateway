/** @format */
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'send-mail';

export interface SendMailRequest {
  email: string;
  type: string;
}

export interface SendMailRes {
  otp: string;
}

export interface SendMailResponse {
  status: number;
  error: string[];
  data?: SendMailRes | undefined;
}

export const SEND_MAIL_PACKAGE_NAME = 'mail';

export interface SendMailServiceClient {
  sendMail(request: SendMailRequest): Observable<SendMailResponse>;
  // validate(request: ValidateRequest): Observable<ValidateResponse>;
}

export interface SendMailServiceController {
  sendMail(
    request: SendMailRequest
  ): Promise<SendMailResponse> | Observable<SendMailResponse> | SendMailResponse;

  // validate(request: ValidateRequest): Promise<ValidateResponse> | Observable<ValidateResponse> | ValidateResponse;
}

export function SendMailServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['send-mail'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('SendMailService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('SendMailService', method)(
        constructor.prototype[method],
        method,
        descriptor
      );
    }
  };
}

export const SEND_MAIL_SERVICE_NAME = 'SendMailService';
