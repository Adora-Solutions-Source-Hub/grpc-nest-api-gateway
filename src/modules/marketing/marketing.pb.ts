// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: marketing.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "marketing";

/** Research Metadata */
export interface CreateResearchMetadataRequest {
  id: number;
}

export interface CreateResearchMetadataResponse {
  status: number;
  error: string[];
  researchMetadata: CreateResearchMetadataRequest | undefined;
}

/** Brief */
export interface CreateBriefRequest {
  businessDomain: string;
  website: string;
  productName: string;
  marketLocation: string;
  projectDescription: string;
  clientName: string;
  brandName: string;
  campaignStart: string;
  campaignEnd: string;
  budget: string;
  targetAudience: string[];
  competitors: string[];
  differentiation: string[];
  pastCampaign: string[];
  additionalRequirements: string[];
  socialMediaLink: string;
}

export interface CreateBriefResponse {
  status: number;
  error: string[];
  brief: CreateBriefRequest | undefined;
}

export interface CreateCampaignRequest {
  name: string;
  userId: number;
  brief: CreateBriefRequest | undefined;
}

export interface CreateCampaignResponse {
  status: number;
  error: string[];
  campaign: CreateCampaignRequest | undefined;
}

export const MARKETING_PACKAGE_NAME = "marketing";

export interface MarketingServiceClient {
  createCampaign(request: CreateCampaignRequest): Observable<CreateCampaignResponse>;

  createBrief(request: CreateBriefRequest): Observable<CreateBriefResponse>;

  createResearchMetadata(request: CreateResearchMetadataRequest): Observable<CreateResearchMetadataResponse>;
}

export interface MarketingServiceController {
  createCampaign(
    request: CreateCampaignRequest,
  ): Promise<CreateCampaignResponse> | Observable<CreateCampaignResponse> | CreateCampaignResponse;

  createBrief(
    request: CreateBriefRequest,
  ): Promise<CreateBriefResponse> | Observable<CreateBriefResponse> | CreateBriefResponse;

  createResearchMetadata(
    request: CreateResearchMetadataRequest,
  ):
    | Promise<CreateResearchMetadataResponse>
    | Observable<CreateResearchMetadataResponse>
    | CreateResearchMetadataResponse;
}

export function MarketingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createCampaign", "createBrief", "createResearchMetadata"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MarketingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MarketingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MARKETING_SERVICE_NAME = "MarketingService";
